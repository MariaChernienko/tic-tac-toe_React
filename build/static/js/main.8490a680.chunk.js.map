{"version":3,"sources":["components/gameboard.js","App.js","serviceWorker.js","index.js"],"names":["Gameboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addStep","id","state","isClickable","cells","toConsumableArray","value","setState","prevState","step","winner","findWinner","arr","winComb","i","length","_winComb$i","slicedToArray","a","b","c","resetAll","map","cell","objectSpread","size","Array","fill","index","_this2","react_default","createElement","className","key","onClick","React","Component","App","gameboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8490a680.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Gameboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { size } = props;\r\n\r\n    this.state = {\r\n      cells: Array(size * size)\r\n        .fill(null)\r\n        .map((value, index) => {\r\n          return {\r\n            value,\r\n            id: index\r\n          };\r\n        }),\r\n      isClickable: true,\r\n      step: 0,\r\n      winner: null\r\n    };\r\n  }\r\n\r\n  addStep = id => {\r\n    const { isClickable } = this.state;\r\n\r\n    if (!isClickable) return;\r\n    const cells = [...this.state.cells];\r\n    if (cells[id].value) return;\r\n\r\n    this.setState(prevState => {\r\n      if (prevState.step % 2 === 0) {\r\n        cells[id].value = \"cross\";\r\n      } else {\r\n        cells[id].value = \"circle\";\r\n      }\r\n\r\n      const winner = this.findWinner(cells);\r\n      return {\r\n        cells,\r\n        winner,\r\n        isClickable: !winner,\r\n        step: prevState.step + 1,\r\n      }\r\n    });\r\n  };\r\n\r\n  findWinner = arr => {\r\n    const winComb = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < winComb.length; i++) {\r\n      const [a, b, c] = winComb[i];\r\n\r\n      if (\r\n        arr[a].value &&\r\n        arr[a].value === arr[b].value &&\r\n        arr[b].value === arr[c].value\r\n      ) {\r\n        return arr[a].value;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  resetAll = () => {\r\n    this.setState(prevState => {\r\n\r\n      return {\r\n        isClickable: true,\r\n        step: 0,\r\n        winner: null,\r\n        cells: prevState.cells.map(cell => ({...cell, value: null})),\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { cells } = this.state;\r\n    const { winner } = this.state;\r\n\r\n    return (\r\n      <div className=\"Game-board\">\r\n        {cells.map(cell => (\r\n          <div\r\n            key={cell.id}\r\n            className=\"Game-board-cell\"\r\n            onClick={() => this.addStep(cell.id)}\r\n          >\r\n            <div className={cell.value} />\r\n          </div>\r\n        ))}\r\n        {winner ? <div className=\"Modal-window\">{winner} won!</div> : \"\"}\r\n\r\n        <button className=\"Button\" onClick={this.resetAll}>\r\n          reset\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gameboard;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Gameboard from \"./components/gameboard\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Game\">\r\n        <h1>Hello, Tic tac Toe!</h1>\r\n        <Gameboard size=\"3\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}